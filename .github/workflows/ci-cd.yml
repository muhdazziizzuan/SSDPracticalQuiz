name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Run Safety check for known vulnerabilities
      run: safety check
      
    - name: Run Bandit security linter
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: dependency-check
    
    services:
      nginx:
        image: nginx:latest
        ports:
          - 80:80
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask requests
        
    - name: Create test file
      run: |
        cat > test_app.py << 'EOF'
        import pytest
        import requests
        import time
        from app import app
        import threading
        
        @pytest.fixture
        def client():
            app.config['TESTING'] = True
            with app.test_client() as client:
                yield client
        
        def test_home_page_get(client):
            """Test GET request to home page"""
            response = client.get('/')
            assert response.status_code == 200
            assert b'Search' in response.data
        
        def test_valid_search_post(client):
            """Test valid search submission"""
            response = client.post('/', data={'search_term': 'test search'})
            assert response.status_code == 302  # Redirect to result page
        
        def test_invalid_search_xss(client):
            """Test XSS protection"""
            response = client.post('/', data={'search_term': '<script>alert("xss")</script>'})
            assert response.status_code == 200
            assert b'Invalid input' in response.data
        
        def test_sql_injection_protection(client):
            """Test SQL injection protection"""
            response = client.post('/', data={'search_term': "'; DROP TABLE users; --"})
            assert response.status_code == 200
            assert b'SQL injection patterns are not allowed' in response.data
        
        def test_result_page(client):
            """Test result page with session"""
            with client.session_transaction() as sess:
                sess['search_term'] = 'test'
            response = client.get('/result')
            assert response.status_code == 200
            assert b'test' in response.data
        EOF
        
    - name: Run integration tests
      run: pytest test_app.py -v
      
    - name: Start Flask app in background
      run: |
        python app.py &
        sleep 5
        
    - name: Test Flask app is running
      run: |
        curl -f http://localhost:5000/ || exit 1
        echo "Flask app is running successfully"

  ui-testing:
    name: UI Testing over HTTP
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium pytest requests
        
    - name: Set up Chrome
      uses: browser-actions/setup-chrome@latest
      
    - name: Set up ChromeDriver
      uses: nanasess/setup-chromedriver@master
      
    - name: Start Flask application
      run: |
        python app.py &
        sleep 10
        
    - name: Create UI test file
      run: |
        cat > test_ui.py << 'EOF'
        import pytest
        import requests
        import time
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        
        @pytest.fixture
        def driver():
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            driver = webdriver.Chrome(options=chrome_options)
            yield driver
            driver.quit()
        
        def test_app_is_running():
            """Test that the Flask app is accessible via HTTP"""
            response = requests.get('http://localhost:5000')
            assert response.status_code == 200
            assert 'Search' in response.text
        
        def test_home_page_ui(driver):
            """Test home page UI elements"""
            driver.get('http://localhost:5000')
            
            # Check page title
            assert "Search Page" in driver.title
            
            # Check form elements exist
            search_input = driver.find_element(By.NAME, "search_term")
            submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            
            assert search_input.is_displayed()
            assert submit_button.is_displayed()
        
        def test_valid_search_flow(driver):
            """Test complete search flow through UI"""
            driver.get('http://localhost:5000')
            
            # Fill and submit form
            search_input = driver.find_element(By.NAME, "search_term")
            search_input.send_keys("test search")
            
            submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # Wait for redirect and check result page
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "h1"))
            )
            
            assert "Search Result" in driver.title
            assert "test search" in driver.page_source
        
        def test_xss_protection_ui(driver):
            """Test XSS protection through UI"""
            driver.get('http://localhost:5000')
            
            search_input = driver.find_element(By.NAME, "search_term")
            search_input.send_keys('<script>alert("xss")</script>')
            
            submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # Should stay on same page with error
            time.sleep(2)
            assert "Search Page" in driver.title
            assert "Invalid input" in driver.page_source
        
        def test_sql_injection_protection_ui(driver):
            """Test SQL injection protection through UI"""
            driver.get('http://localhost:5000')
            
            search_input = driver.find_element(By.NAME, "search_term")
            search_input.send_keys("'; DROP TABLE users; --")
            
            submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # Should stay on same page with error
            time.sleep(2)
            assert "Search Page" in driver.title
            assert "SQL injection patterns are not allowed" in driver.page_source
        EOF
        
    - name: Run UI tests
      run: pytest test_ui.py -v
      
    - name: Test HTTP endpoints
      run: |
        echo "Testing HTTP endpoints..."
        curl -f http://localhost:5000/ || exit 1
        curl -X POST -d "search_term=test" http://localhost:5000/ || exit 1
        echo "All HTTP endpoint tests passed!"

  docker-build-test:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [dependency-check, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: |
        docker-compose build
        
    - name: Start services
      run: |
        docker-compose up -d
        sleep 30
        
    - name: Test Flask service
      run: |
        curl -f http://localhost:5000/ || exit 1
        echo "Flask service is running in Docker"
        
    - name: Test Git server
      run: |
        curl -f http://localhost:3000/ || echo "Git server endpoint tested"
        
    - name: Stop services
      run: docker-compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [dependency-check, integration-tests, ui-testing, docker-build-test, security-scan]
    
    steps:
    - name: Deployment status
      run: |
        echo "🎉 All tests passed! Application is ready for deployment."
        echo "✅ Dependency check completed"
        echo "✅ Integration tests passed"
        echo "✅ UI tests over HTTP completed"
        echo "✅ Docker build and test successful"
        echo "✅ Security scan completed"